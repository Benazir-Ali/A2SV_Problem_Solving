class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        
        def partition(array, start, end):
            
            pivot = array[end]
            i = start - 1

            for j in range(start, end):
                if array[j] >= pivot:
                    i = i + 1
                    (array[i], array[j]) = (array[j], array[i])

            (array[i + 1], array[end]) = (array[end], array[i + 1])

            return i + 1

        def kthLargest(array, start, end, k):
            if (k > 0 and k <= end - start + 1):
                indx = partition(array, start, end)
        
                if (indx - start == k - 1):
                    return array[indx]
        
                if (indx - start > k - 1):
                    return kthLargest(array, start, indx - 1, k)
        
                return kthLargest(array, indx + 1, end, k - indx + start - 1)

        return(kthLargest(nums, 0 , len(nums)-1, k))
